// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique // 登录账号
  password  String // 密码
  psalt     String // 密码盐
  nickname  String? // 用户昵称
  avatar    String? // 头像
  email     String?  @unique // 邮箱
  phone     String? // 手机号
  qq        String? // QQ号
  remark    String? // 备注
  status    Int      @default(1) // 状态：1正常 0禁用
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联
  deptId    Int?           @map("dept_id") // 部门ID
  dept      Dept?          @relation(fields: [deptId], references: [id]) // 用户所属部门
  userRoles UserRole[] // 用户角色关联
  loginLogs LoginLog[] // 用户登录日志
  opLogs    OperationLog[] // 用户操作日志
  uploads   Upload[] // 用户上传文件

  @@map("sys_user")
}

// 角色表
model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique // 角色名称
  value     String   @unique // 角色值(权限字符串)
  remark    String? // 备注 
  status    Int      @default(1) // 状态：1正常 0禁用
  isDefault Boolean? @default(false) @map("default") // 是否默认角色
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  orderNo   Int      @default(0) @map("order_no") // 排序号

  // 关联
  userRoles UserRole[] // 角色用户关联
  roleMenus RoleMenu[] // 角色菜单关联
  roleDepts RoleDept[] // 角色部门数据权限关联

  @@map("sys_role")
}

// 用户角色关系表
model UserRole {
  userId    Int      @map("user_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")

  // 关联
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("sys_user_role")
}

// 菜单表
model Menu {
  id          Int      @id @default(autoincrement())
  parentId    Int?     @map("parent_id") // 父菜单ID
  path        String? // 路由路径
  name        String // 菜单名称
  permission  String? // 权限标识
  type        Int      @default(0) // 类型：0目录 1菜单 2按钮
  icon        String?  @default("") // 图标
  component   String? // 组件路径
  keepAlive   Int      @default(0) @map("keep_alive") // 是否缓存：0缓存 1不缓存
  show        Int      @default(1) // 是否显示：1显示 0隐藏
  status      Int      @default(1) // 状态：1正常 0禁用
  isExt       Int      @default(0) @map("is_ext") // 是否外链：0否 1是
  extOpenMode Int      @default(1) @map("ext_open_mode") // 外链打开方式：1新窗口 2内嵌
  activeMenu  String?  @map("active_menu") // 高亮菜单
  query       String? // 路由参数
  orderNo     Int      @default(0) @map("order_no") // 排序号
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关联
  parent    Menu?      @relation("MenuToMenu", fields: [parentId], references: [id])
  children  Menu[]     @relation("MenuToMenu")
  roleMenus RoleMenu[] // 菜单角色关联

  @@map("sys_menu")
}

// 角色菜单关系表
model RoleMenu {
  roleId    Int      @map("role_id")
  menuId    Int      @map("menu_id")
  createdAt DateTime @default(now()) @map("created_at")

  // 关联
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@id([roleId, menuId])
  @@map("sys_role_menu")
}

// 部门表
model Dept {
  id        Int      @id @default(autoincrement())
  name      String // 部门名称
  orderNo   Int      @default(0) @map("order_no") // 排序号
  parentId  Int?     @map("parent_id") // 父部门ID
  mpath     String?  @default("") // 部门层级路径
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联
  parent    Dept?      @relation("DeptToDept", fields: [parentId], references: [id])
  children  Dept[]     @relation("DeptToDept")
  users     User[] // 部门下的用户
  roleDepts RoleDept[] // 部门数据权限关联

  @@map("sys_dept")
}

// 角色部门数据权限表
model RoleDept {
  roleId    Int      @map("role_id")
  deptId    Int      @map("dept_id")
  createdAt DateTime @default(now()) @map("created_at")

  // 关联
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  dept Dept @relation(fields: [deptId], references: [id], onDelete: Cascade)

  @@id([roleId, deptId])
  @@map("sys_role_dept")
}

// 字典类型表
model DictType {
  id        Int      @id @default(autoincrement())
  name      String // 字典名称
  code      String   @unique // 字典编码
  status    Int      @default(1) // 状态：1正常 0禁用
  remark    String? // 备注
  createBy  Int      @map("create_by") // 创建者
  updateBy  Int      @map("update_by") // 更新者
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联
  items DictItem[] // 字典类型下的字典项

  @@map("sys_dict_type")
}

// 字典项表
model DictItem {
  id        Int      @id @default(autoincrement())
  typeId    Int?     @map("type_id") // 字典类型ID
  label     String // 字典标签
  value     String // 字典值
  orderNo   Int?     @map("order_no") // 排序号
  status    Int      @default(1) // 状态：1正常 0禁用
  remark    String? // 备注
  createBy  Int      @map("create_by") // 创建者
  updateBy  Int      @map("update_by") // 更新者
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联
  dictType DictType? @relation(fields: [typeId], references: [id], onDelete: Cascade)

  @@map("sys_dict_item")
}

// 系统配置表
model Config {
  id        Int      @id @default(autoincrement())
  key       String   @unique // 配置键
  name      String // 配置名称
  value     String? // 配置值
  remark    String? // 备注
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sys_config")
}

// 登录日志表
model LoginLog {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id") // 用户ID
  ip        String? // 登录IP
  ua        String? // 用户代理
  address   String? // 登录地址
  provider  String? // 登录提供者
  status    Int      @default(1) // 状态：1成功 0失败
  message   String? // 登录消息
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sys_login_log")
}

// 操作日志表
model OperationLog {
  id          Int      @id @default(autoincrement())
  userId      Int?     @map("user_id") // 操作用户ID
  module      String? // 操作模块
  action      String? // 操作类型
  ip          String? // 操作IP
  path        String // 请求路径
  method      String // 请求方法
  params      String?  @db.Text // 请求参数
  result      String?  @db.Text // 操作结果
  status      Int // 操作状态
  duration    Int? // 执行时间(ms)
  description String? // 操作描述
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关联
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("sys_operation_log")
}

// 文件上传表
model Upload {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id") // 上传用户ID
  filename  String // 文件名
  filePath  String   @map("file_path") // 文件路径
  mimetype  String // 文件类型
  size      Int // 文件大小
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("sys_upload")
}
